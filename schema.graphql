schema {
  query: Query
  mutation: Mutation
}

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean = true
  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(forceGenerate: Boolean, model: String, models: [String!]) on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @scope(scope: String!) on FIELD_DEFINITION

"""
CreateGroupInput is used for create Group object.
Input was generated by ent.
"""
input CreateGroupInput {
  description: String
  name: String!
  scopeSetIDs: [ID!]
}

"""
CreateScopeSetInput is used for create ScopeSet object.
Input was generated by ent.
"""
input CreateScopeSetInput {
  description: String
  scopes: [String!]
  slug: String!
}

"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  email: String!
  groupID: ID!
  name: String!
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

type Group implements Node {
  createdAt: Time!
  deletedAt: Time
  description: String
  id: ID!
  name: String!
  scopeSet: [ScopeSet!]
  updatedAt: Time!
}

type Mutation {
  createGroup(input: CreateGroupInput!): Group
  createScopeSet(input: CreateScopeSetInput!): ScopeSet
  createUser(input: CreateUserInput!): User
  deleteGroup(id: ID!): Boolean!
  """Delete the current user."""
  deleteMe: Boolean!
  deleteScopeSet(id: ID!): Boolean!
  deleteUser(id: ID!): Boolean!
  """
  Impersonate a user.
  
  Returns the token of the impersonated user.
  You can then use the token to access the user's resources.
  """
  impersonateUser(userID: ID!): String!
  """Logout from all the devices of the current user."""
  logoutAll: Boolean!
  updateGroup(id: ID!, input: UpdateGroupInput!): Group
  updateScopeSet(id: ID!, input: UpdateScopeSetInput!): ScopeSet
  updateUser(id: ID!, input: UpdateUserInput!): User
  """Verify the registration of this user."""
  verifyRegistration: Boolean!
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Query {
  groups: [Group!]!
  me: User!
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  scopeSets: [ScopeSet!]!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
}

type ScopeSet implements Node {
  description: String
  id: ID!
  scopes: [String!]!
  slug: String!
}

"""The builtin Time type"""
scalar Time

"""
UpdateGroupInput is used for update Group object.
Input was generated by ent.
"""
input UpdateGroupInput {
  addScopeSetIDs: [ID!]
  clearDescription: Boolean
  clearScopeSet: Boolean
  description: String
  name: String
  removeScopeSetIDs: [ID!]
}

"""
UpdateScopeSetInput is used for update ScopeSet object.
Input was generated by ent.
"""
input UpdateScopeSetInput {
  appendScopes: [String!]
  clearDescription: Boolean
  description: String
  scopes: [String!]
}

"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  email: String
  groupID: ID
  name: String
}

type User implements Node {
  createdAt: Time!
  deletedAt: Time
  email: String!
  group: Group!
  id: ID!
  impersonatedBy: User
  name: String!
  updatedAt: Time!
}

"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: User
}